{"version":3,"sources":["component/Card.js","component/Buttons.js","component/ScoreCard.js","component/Header.js","component/Levels.js","component/Board.js","App.js","reportWebVitals.js","index.js"],"names":["selectedCard1","selectedCard2","value1","value2","Card","props","value","flipped","id","updateCardDeck","incrementMoves","matchedPairs","resetMatchedPairs","incrementMatchedPairs","resetMoves","currentLevel","setStar","cardDeck","gameCompleted","alert","i","gameStart","handleCardClick","setTimeout","className","onClick","Buttons","handleRestartLevel","handleRestartGame","handleGiveUp","disabled","hintDisabled","handleHint","ScoreCard","moves","currentLevelStars","totalStars","Header","Levels","totalLevels","handleLevelClicked","totalLevelsArray","push","map","level","cardValue","card","currentStar","stars","copyOfStars","createBoard","Math","ceil","createCardValues","sort","random","shuffle","createCard","setTotalStars","key","Board","useState","setMoves","setCardDeck","setMatchedPairs","setHintDisabled","totalStarsState","setTotalStarsState","currentStarState","setCurrentStarState","floor","newDeck","randomNumber","item","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7c2dc1a5.chunk.js","sourcesContent":["import React from 'react';\n\nlet selectedCard1 = 0;\nlet selectedCard2 = 0;\nlet value1 = 0;\nlet value2 = 0;\n\nconst Card = (props) => { \n    let { \n        value, \n        flipped, \n        id, \n        updateCardDeck, \n        incrementMoves, \n        matchedPairs, \n        resetMatchedPairs, \n        incrementMatchedPairs, \n        resetMoves, \n        currentLevel, \n        setStar\n        } = props;\n\n    let cardDeck = [...props.cardDeck];\n\n    const gameStart = (currentLevel) => {\n        selectedCard1 = 0;\n        selectedCard2 = 0;\n        value1 = 0;\n        value2 = 0;\n        resetMatchedPairs();\n        for(let i=0; i<currentLevel; i++){\n            cardDeck[i].flipped = false;\n        }\n        updateCardDeck(cardDeck);\n    }\n\n    const gameCompleted = () => {\n        if(matchedPairs === currentLevel/2-1){\n            alert(\"Congratulations you have cleared this level\");\n            updateCardDeck(cardDeck);\n            setStar(currentLevel);\n            gameStart(currentLevel);\n            resetMoves();\n            resetMatchedPairs();\n        }\n    }\n    \n    const compareCards = () => {\n        if (selectedCard1 && selectedCard2 && (value1 === value2)){\n            selectedCard1 = 0;\n            value1 = 0;\n            selectedCard2 = 0;\n            value2 = 0;\n            updateCardDeck(cardDeck);\n            incrementMatchedPairs();\n            incrementMoves();\n            gameCompleted();\n        } \n        \n        else if (selectedCard1 && selectedCard2) {\n            setTimeout(() => {\n                cardDeck[selectedCard1-1].flipped = false;\n                cardDeck[selectedCard2-1].flipped = false;\n                updateCardDeck(cardDeck);\n                selectedCard1 = 0;\n                value1 = 0;\n                selectedCard2 = 0;\n                value2 = 0;\n                incrementMoves();\n                }, 500);\n        }\n    }\n        const handleCardClick = (id) => {\n            cardDeck[id-1].flipped = true;\n            updateCardDeck(cardDeck);\n            if(selectedCard1 === 0){\n                selectedCard1 = id;\n                value1 = value;\n            } else {\n                selectedCard2 = id\n                value2 = value;\n            }\n\n            compareCards();\n        }\n\n        \n        return (\n            <div \n                className={flipped ? \"flipped\" : \"card\"}\n                 onClick={() => handleCardClick(id)}\n                 id={id}\n                 >\n                <p className=\"card-number\">\n                    {value}\n                </p>\n            </div>\n        )\n    }\n\n\nexport default Card;","import React from 'react';\nconst Buttons = (props) => {\n    const currentLevel = props.currentLevel;\n    return (\n        <div className=\"all-buttons\">\n                    <div className=\"btn\" onClick={() => props.handleRestartLevel(currentLevel)}>Restart Level</div>\n                    <div className=\"btn\" onClick={() => props.handleRestartGame()}>Restart Game</div>\n                    <div className=\"btn\" onClick={() => props.handleGiveUp(currentLevel)}>I Give Up</div>\n                    <div className=\"btn\" id=\"hint\" disabled={props.hintDisabled} onClick={() => props.handleHint(currentLevel)}>Hint</div>\n                </div>\n    )\n}\n\nexport default Buttons;","import React from 'react';\n\nconst ScoreCard = (props) => {\n    return (\n        <div className=\"score-card\">\n                <p>Moves: {props.moves}</p>\n                <p>Stars: {props.currentLevelStars}</p>\n                <p>Total Stars: {props.totalStars}</p>\n            </div>\n    )\n}\n\nexport default ScoreCard;","import React from 'react';\n \nconst Header = (props) => {\n    return (\n        <div className=\"header\">\n            <h1>Memory Game</h1>\n            <div><h3 className=\"level-indicator\">Current Level: {props.currentLevel}</h3></div>\n            <div><h4 className=\"hint-text\">(You can only use hint once a level)</h4></div>\n        </div>\n    )\n}\n\nexport default Header;","import React from 'react';\n\nconst Levels = (props) => {\n    const {totalLevels, handleLevelClicked} = props;\n    let totalLevelsArray = [];\n\n    for(let i=1; i<= totalLevels; i++){\n        totalLevelsArray.push(i);\n    }\n    return (\n        <div className=\"levels-container\">\n                <ul>\n                    {totalLevelsArray.map((level) => {\n                        return <li \n                                key={level}\n                                className=\"btn\" \n                                onClick={() => handleLevelClicked(level*4)}>\n                                Level {level}\n                                </li>    \n                    })}\n                </ul>\n            </div>\n    )\n}\n\nexport default Levels;","import React, {useState} from 'react'\nimport Card from './Card'\nimport Buttons from './Buttons';\nimport ScoreCard from './ScoreCard';\nimport Header from './Header';\nimport Levels from './Levels';\n\nlet cardValue = [];\n\nlet card = [];\nlet totalLevels = 6;\nlet currentLevel = 4;\nlet currentStar = 0;\nlet stars = {\"1\": 0, \"2\": 0,\"3\": 0,\"4\": 0,\"5\": 0, \"6\": 0}\nlet copyOfStars = {\"1\": 0, \"2\": 0,\"3\": 0,\"4\": 0,\"5\": 0,\"6\": 0};\nlet totalStars = 0;\n\nconst createCardValues = () => {\n    cardValue = [];\n    for(let i=1; i<=currentLevel; i++){\n        cardValue.push(Math.ceil(i/2));\n    }\n}\nconst createCard = () => {\n    card = [];\n    for(let i=1; i<=currentLevel; i++){\n        card.push({id:i, flipped: false, value: cardValue[i-1]});\n    }\n}\nconst shuffle = (cardValue) => {\n        cardValue.sort(() => Math.random() - 0.5);\n        return cardValue.sort(() => Math.random() - 0.5);\n      }\n\nconst createBoard = () => {\n    createCardValues();\n    shuffle(cardValue);\n    createCard();\n}\n\nconst setTotalStars = (stars) => {\n    totalStars = 0;\n    for(let key in stars){\n        totalStars = totalStars + stars[key];\n    }\n    return totalStars;\n}\n\ncreateBoard();\n\nconst Board = () => {\n    const [moves, setMoves] = useState(0);\n    const [cardDeck, setCardDeck] = useState(card);\n    const [matchedPairs, setMatchedPairs] = useState(0);\n    const [hintDisabled, setHintDisabled] = useState(false);\n    const [totalStarsState, setTotalStarsState] = useState(totalStars);\n    const [currentStarState, setCurrentStarState] = useState(stars[currentLevel/4]);\n\n    const setStar = (currentLevel) => {\n        if(moves > 0 && moves <= Math.floor(0.75*currentLevel)){\n            currentStar = 3;\n        } else if(moves > 0 && moves > Math.floor(0.75*currentLevel) && moves <= currentLevel){\n            currentStar = 2;\n        } else if(moves > currentLevel) {\n            currentStar = 1;\n        } else {\n            currentStar = 0;\n        };\n\n        if(stars[currentLevel/4] < currentStar){\n            stars[currentLevel/4] = currentStar;\n        }\n        \n        setCurrentStarState(stars[currentLevel/4]);\n        setTotalStars(stars);\n        setTotalStarsState(totalStars);\n\n    }\n\n\n    const incrementMoves = () => {\n        setMoves(moves + 1);\n    }\n\n    const resetMoves = () => {\n        setMoves(0);\n    }\n\n    const resetMatchedPairs = () => {\n        setMatchedPairs(0);\n    }\n\n    const incrementMatchedPairs = () => {\n        setMatchedPairs(matchedPairs + 1);\n    }\n\n    const updateCardDeck = (card) => {\n        setCardDeck(card);\n    }\n\n    const handleRestartLevel = (currentLevel) => {\n        alert(\"restarting level\");\n        setMoves(0);\n        createBoard();\n        setCardDeck(card);\n        stars[currentLevel/4] = 0;\n        setCurrentStarState(stars[currentLevel/4]);\n        setTotalStars(stars);\n        setTotalStarsState(totalStars);\n        setHintDisabled(false);\n        setMatchedPairs(0);\n    }\n\n    const handleRestartGame = () => {\n        alert(\"restarting game\");\n        setMoves(0);\n        createBoard();\n        setCardDeck(card);\n        currentStar = 0;\n        setCurrentStarState(currentStar);\n        stars = copyOfStars;\n        setTotalStars(copyOfStars);\n        setTotalStarsState(0);\n        setHintDisabled(false);\n        setMatchedPairs(0);\n    }\n\n    const handleLevelClicked = (level) => {\n        setMoves(0);\n        currentLevel = level;\n        setCurrentStarState(stars[currentLevel/4]);\n        createBoard();\n        setCardDeck(card);\n        setHintDisabled(false);\n        setMatchedPairs(0);\n    }\n\n    const handleHint = (currentLevel) => {\n        let randomNumber = Math.ceil(Math.random()*currentLevel-1);\n        if(!cardDeck[randomNumber].flipped){\n            const newDeck = [...cardDeck];\n            newDeck[randomNumber].flipped = true;\n            updateCardDeck(newDeck);\n            setTimeout(() => {\n                 const newDeck = [...cardDeck]\n;                newDeck[randomNumber].flipped = false;\n                updateCardDeck(newDeck);\n            }, 500); \n\n            setHintDisabled(true);\n        }\n        else {\n            handleHint(currentLevel);\n        }\n    }\n\n    const handleGiveUp = (currentLevel) => {\n        const newDeck = [...cardDeck]\n        for(let i=0; i<currentLevel; i++){\n            newDeck[i].flipped = true;\n        }\n        updateCardDeck(newDeck);\n        setHintDisabled(true);\n    }\n\n        return (\n            <div className=\"wrapper\">\n                <Header currentLevel={currentLevel/4}/>\n                <Buttons\n                    currentLevel={currentLevel} \n                    handleRestartLevel={handleRestartLevel}\n                    handleRestartGame={handleRestartGame}\n                    handleGiveUp={handleGiveUp}\n                    handleHint={handleHint}\n                    hintDisabled={hintDisabled}\n                />\n                \n                <ScoreCard \n                    moves={moves}\n                    currentLevelStars={currentStarState}\n                    totalStars={totalStarsState}\n                />\n                <Levels \n                    handleLevelClicked={handleLevelClicked}\n                    totalLevels={totalLevels}\n                />\n                            \n                <div className=\"cards-container\">\n                    {cardDeck.map((item) => {\n                        return <Card \n                                key={item.id} \n                                value={item.value}\n                                flipped={item.flipped} \n                                id={item.id}\n                                cardDeck={cardDeck}\n                                updateCardDeck={updateCardDeck} \n                                incrementMoves={incrementMoves}\n                                matchedPairs={matchedPairs}\n                                resetMatchedPairs={resetMatchedPairs}\n                                incrementMatchedPairs={incrementMatchedPairs}\n                                resetMoves={resetMoves}\n                                currentLevel={currentLevel}\n                                setStar={setStar}\n                                />\n                    })}\n                    </div>\n            </div>\n        )\n    \n}\n\nexport default Board;","import React from 'react';\nimport './App.css';\nimport Board from './component/Board';\n\nfunction App() {\n\n  return (\n      <Board />\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}