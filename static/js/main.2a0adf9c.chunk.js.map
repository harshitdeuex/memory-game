{"version":3,"sources":["component/Card.js","component/Buttons.js","component/ScoreCard.js","component/Header.js","component/Levels.js","component/Board.js","App.js","reportWebVitals.js","index.js"],"names":["selectedCard1","selectedCard2","value1","value2","Card","props","currentLevel","cardDeck","flipped","id","value","matchedPairs","gameCompleted","setStar","alert","resetMatchedPairs","i","updateCardDeck","console","log","gameStart","resetMoves","handleCardClick","incrementMatchedPairs","incrementMoves","setTimeout","className","onClick","Buttons","handleRestartLevel","handleRestartGame","handleGiveUp","disabled","hintDisabled","handleHint","ScoreCard","moves","currentLevelStars","totalStars","Header","Levels","handleLevelClicked","cardValue","card","currentStar","stars","copyOfStars","createBoard","push","Math","ceil","createCardValues","sort","random","shuffle","createCard","setTotalStars","Board","useState","setMoves","setCardDeck","setMatchedPairs","setHintDisabled","totalStarsState","setTotalStarsState","currentStarState","setCurrentStarState","floor","newDeck","randomNumber","level","map","item","restartLevel","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2a0adf9c.chunk.js","sourcesContent":["import React from 'react';\n\nlet selectedCard1 = 0;\nlet selectedCard2 = 0;\nlet value1 = 0;\nlet value2 = 0;\n\nconst Card = (props) => { \n    let currentLevel = props.currentLevel;\n    let cardDeck = [...props.cardDeck]\n    let flipped = props.flipped;\n    let id = props.id;\n    let value = props.value;\n    let matchedPairs = props.matchedPairs;\n\n    const gameStart = (currentLevel) => {\n        selectedCard1 = 0;\n        selectedCard2 = 0;\n        value1 = 0;\n        value2 = 0;\n        props.resetMatchedPairs();\n        for(let i=0; i<currentLevel; i++){\n            cardDeck[i].flipped = false;\n        }\n        props.updateCardDeck(cardDeck);\n        console.log(\"Game Start\");\n        console.log(cardDeck);\n    }\n\n    const gameCompleted = () => {\n        if(matchedPairs === currentLevel/2-1){\n            props.setStar(currentLevel);\n            alert(\"Congratulations you have cleared this level\");\n            gameStart(currentLevel);\n            props.resetMoves();\n            props.resetMatchedPairs();\n            props.updateCardDeck(cardDeck);\n        }\n    }\n    \n    const compareCards = () => {\n        if (selectedCard1 && selectedCard2 && (value1 === value2)){\n            selectedCard1 = 0;\n            value1 = 0;\n            selectedCard2 = 0;\n            value2 = 0;\n            props.incrementMatchedPairs();\n            props.incrementMoves();\n            props.updateCardDeck(cardDeck);\n            gameCompleted();\n        } \n        \n        else if (selectedCard1 && selectedCard2) {\n            setTimeout(() => {\n                cardDeck[selectedCard1-1].flipped = false;\n                cardDeck[selectedCard2-1].flipped = false;\n                props.updateCardDeck(cardDeck);\n                selectedCard1 = 0;\n                value1 = 0;\n                selectedCard2 = 0;\n                value2 = 0;\n                props.incrementMoves();\n                }, 500);\n        }\n    }\n        const handleCardClick = (id) => {\n            cardDeck[id-1].flipped = true;\n            props.updateCardDeck(cardDeck);\n            if(selectedCard1 === 0){\n                selectedCard1 = id;\n                value1 = value;\n            } else {\n                selectedCard2 = id\n                value2 = value;\n            }\n\n            compareCards();\n        }\n\n        \n        return (\n            <div \n                className={flipped ? \"flipped\" : \"card\"}\n                 onClick={() => handleCardClick(id)}\n                 id={id}\n                 >\n                <p className=\"card-number\">\n                    {value}\n                </p>\n            </div>\n        )\n    }\n\n\nexport default Card;","import React from 'react';\nconst Buttons = (props) => {\n    const currentLevel = props.currentLevel;\n    return (\n        <div className=\"all-buttons\">\n                    <div className=\"btn\" onClick={() => props.handleRestartLevel(currentLevel)}>Restart Level</div>\n                    <div className=\"btn\" onClick={() => props.handleRestartGame()}>Restart Game</div>\n                    <div className=\"btn\" onClick={() => props.handleGiveUp(currentLevel)}>I Give Up</div>\n                    <div className=\"btn\" id=\"hint\" disabled={props.hintDisabled} onClick={() => props.handleHint(currentLevel)}>Hint</div>\n                {/* <div className=\"btn\" id=\"challenge\" style={{display: \"none\"}}>Challenge a friend</div> */}\n                </div>\n    )\n}\n\nexport default Buttons;","import React from 'react';\n\nconst ScoreCard = (props) => {\n    return (\n        <div className=\"score-card\">\n                <p>Moves: {props.moves}</p>\n                <p>Stars: {props.currentLevelStars}</p>\n                <p>Total Stars: {props.totalStars}</p>\n            </div>\n    )\n}\n\nexport default ScoreCard;","import React from 'react';\n \nconst Header = (props) => {\n    return (\n        <div className=\"header\">\n            <h1>Memory Game</h1>\n            <div><h3 className=\"level-indicator\">Current Level: {props.currentLevel}</h3></div>\n            <div><h4 className=\"hint-text\">(You can only use hint once a level)</h4></div>\n        </div>\n    )\n}\n\nexport default Header;","import React from 'react';\n\nconst Levels = (props) => {\n    return (\n        <div className=\"levels-container\">\n                <ul>\n                    <li className=\"btn\" onClick={() => props.handleLevelClicked(4)}>Level 1</li>\n                    <li className=\"btn\" onClick={() => props.handleLevelClicked(8)}>Level 2</li>\n                    <li className=\"btn\" onClick={() => props.handleLevelClicked(12)}>Level 3</li>\n                    <li className=\"btn\" onClick={() => props.handleLevelClicked(16)}>Level 4</li>\n                    <li className=\"btn\" onClick={() => props.handleLevelClicked(20)}>Level 5</li>\n                </ul>\n            </div>\n    )\n}\n\nexport default Levels;","import React, {useState} from 'react'\nimport Card from './Card'\nimport Buttons from './Buttons';\nimport ScoreCard from './ScoreCard';\nimport Header from './Header';\nimport Levels from './Levels';\n\nlet cardValue = [];\n\nlet card = [];\n\nlet currentLevel = 4;\nlet currentStar = 0;\nlet stars = {\"1\": 0, \"2\": 0,\"3\": 0,\"4\": 0,\"5\": 0}\nlet copyOfStars = {\"1\": 0, \"2\": 0,\"3\": 0,\"4\": 0,\"5\": 0};\nlet totalStars = 0;\n\nconst createCardValues = () => {\n    cardValue = [];\n    for(let i=1; i<=currentLevel; i++){\n        cardValue.push(Math.ceil(i/2));\n    }\n}\nconst createCard = () => {\n    card = [];\n    for(let i=1; i<=currentLevel; i++){\n        card.push({id:i, flipped: false, value: cardValue[i-1]});\n    }\n}\nconst shuffle = (cardValue) => {\n        cardValue.sort(() => Math.random() - 0.5);\n        return cardValue.sort(() => Math.random() - 0.5);\n      }\n\nconst createBoard = () => {\n    createCardValues();\n    shuffle(cardValue);\n    createCard();\n}\n\nconst setTotalStars = (stars) => {\n    return totalStars = stars[\"1\"] + stars[\"2\"] + stars[\"3\"] + stars[\"4\"] + stars[\"5\"];\n}\n\n/* const displayChallengeButton = () => {\n    console.log(\"Display challenge button is called\");\n    if (stars.level1 && stars.level2 && stars.level3 && stars.level4 && stars.level5){\n        document.getElementById(\"challenge\").style.display = \"block\";\n        alert(\"Challenge button is enabled, you can challenge a friend now.\")\n    } else {\n        document.getElementById(\"challenge\").style.display = \"none\";\n    }\n} */\ncreateBoard();\n\nconst Board = () => {\n    const [moves, setMoves] = useState(0);\n    const [cardDeck, setCardDeck] = useState(card);\n    const [matchedPairs, setMatchedPairs] = useState(0);\n    const [hintDisabled, setHintDisabled] = useState(false);\n    const [totalStarsState, setTotalStarsState] = useState(totalStars);\n    const [currentStarState, setCurrentStarState] = useState(stars[currentLevel/4]);\n\n    console.log(\"Board\");\n    const setStar = (currentLevel) => {\n        if(moves > 0 && moves <= Math.floor(0.75*currentLevel)){\n            currentStar = 3;\n        } else if(moves > 0 && moves > Math.floor(0.75*currentLevel) && moves <= currentLevel){\n            currentStar = 2;\n        } else if(moves > currentLevel) {\n            currentStar = 1;\n        } else {\n            currentStar = 0;\n        };\n        stars[currentLevel/4] = currentStar;\n        setCurrentStarState(stars[currentLevel/4]);\n        setTotalStars(stars);\n        setTotalStarsState(totalStars);\n        /* displayChallengeButton(); */\n    }\n\n\n    const incrementMoves = () => {\n        setMoves(moves + 1);\n    }\n\n    const resetMoves = () => {\n        setMoves(0);\n    }\n\n    const resetMatchedPairs = () => {\n        setMatchedPairs(0);\n    }\n\n    const incrementMatchedPairs = () => {\n        setMatchedPairs(matchedPairs + 1);\n    }\n\n    const updateCardDeck = (card) => {\n        setCardDeck(card);\n        console.log(\"card deck updated\")\n    }\n\n    const handleRestartLevel = (currentLevel) => {\n        alert(\"restarting level\");\n        setMoves(0);\n        createBoard();\n        setCardDeck(card);\n        stars[currentLevel/4] = 0;\n        setCurrentStarState(stars[currentLevel/4]);\n        setTotalStars(stars);\n        setTotalStarsState(totalStars);\n        setHintDisabled(false);\n        setMatchedPairs(0);\n        /* displayChallengeButton(); */\n    }\n\n    const handleRestartGame = () => {\n        console.log(\"Restart Game Clicked\");\n        alert(\"restarting game\");\n        setMoves(0);\n        createBoard();\n        setCardDeck(card);\n        currentStar = 0;\n        setCurrentStarState(0);\n        stars = copyOfStars;\n        setTotalStars(copyOfStars);\n        setTotalStarsState(0);\n        console.log(\"after setting total stars\")\n        console.log();\n        setHintDisabled(false);\n        setMatchedPairs(0);\n        console.log(stars);\n        /* displayChallengeButton(); */\n    }\n\n    const handleLevelClicked = (level) => {\n        setMoves(0);\n        currentLevel = level;\n        setCurrentStarState(stars[currentLevel/4]);\n        createBoard();\n        setCardDeck(card);\n        setHintDisabled(false);\n        setMatchedPairs(0);\n        /* displayChallengeButton(); */\n    }\n\n    const handleHint = (currentLevel) => {\n        let randomNumber = Math.ceil(Math.random()*currentLevel-1);\n        if(!cardDeck[randomNumber].flipped){\n            const newDeck = [...cardDeck];\n            newDeck[randomNumber].flipped = true;\n            updateCardDeck(newDeck);\n            setTimeout(() => {\n                 const newDeck = [...cardDeck]\n;                newDeck[randomNumber].flipped = false;\n                updateCardDeck(newDeck);\n            }, 500); \n\n            setHintDisabled(true);\n        }\n        else {\n            handleHint(currentLevel);\n        }\n    }\n\n    const handleGiveUp = (currentLevel) => {\n        const newDeck = [...cardDeck]\n        for(let i=0; i<currentLevel; i++){\n            newDeck[i].flipped = true;\n        }\n        updateCardDeck(newDeck);\n        setHintDisabled(true);\n    }\n\n        return (\n            <div className=\"wrapper\">\n                <Header currentLevel={currentLevel/4}/>\n                <Buttons\n                    currentLevel={currentLevel} \n                    handleRestartLevel={handleRestartLevel}\n                    handleRestartGame={handleRestartGame}\n                    handleGiveUp={handleGiveUp}\n                    handleHint={handleHint}\n                    hintDisabled={hintDisabled}\n                    \n                />\n                \n                <ScoreCard \n                    moves={moves}\n                    currentLevelStars={currentStarState}\n                    totalStars={totalStarsState}\n                />\n                <Levels \n                    handleLevelClicked={handleLevelClicked}\n                />\n                            \n                <div className=\"cards-container\">\n                    {cardDeck.map((item) => {\n                        return <Card \n                                key={item.id} \n                                value={item.value}\n                                flipped={item.flipped} \n                                id={item.id}\n                                cardDeck={cardDeck}\n                                updateCardDeck={updateCardDeck} \n                                incrementMoves={incrementMoves}\n                                restartLevel={handleRestartLevel}\n                                matchedPairs={matchedPairs}\n                                resetMatchedPairs={resetMatchedPairs}\n                                incrementMatchedPairs={incrementMatchedPairs}\n                                resetMoves={resetMoves}\n                                currentLevel={currentLevel}\n                                setStar={setStar}\n                                />\n                    })}\n                    </div>\n            </div>\n        )\n    \n}\n\nexport default Board;","import React from 'react';\nimport './App.css';\nimport Board from './component/Board';\n\nfunction App() {\n\n  return (\n      <Board />\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}