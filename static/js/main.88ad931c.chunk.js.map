{"version":3,"sources":["component/Card.js","component/Board.js","App.js","reportWebVitals.js","index.js"],"names":["selectedCard1","selectedCard2","value1","value2","matchedPairs","cardBackgroundColor","gameStart","currentLevel","i","document","getElementById","style","backgroundColor","color","pointerEvents","handleHint","randomNumber","Math","ceil","random","console","log","setTimeout","Card","props","compareCards","incrementMoves","setStar","alert","resetMoves","className","onClick","id","transition","value","cardValue","card","currentStar","stars","copyOfStars","totalStars","createBoard","push","createCardValues","sort","shuffle","flipped","createCard","setTotalStars","Board","useState","moves","setMoves","cardDeck","setCardDeck","floor","handleRestartLevel","handleLevelClicked","level","handleOpenCard","forEach","item","handleCloseCard","handleGiveUp","map","restartLevel","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.88ad931c.chunk.js","sourcesContent":["import React from 'react';\n\nlet selectedCard1 = 0;\nlet selectedCard2 = 0;\nlet value1 = 0;\nlet value2 = 0;\nlet matchedPairs = 0;\nconst cardBackgroundColor = \"#448AFF\";\n\nexport const gameStart = (currentLevel) => {\n    selectedCard1 = 0;\n    selectedCard2 = 0;\n    value1 = 0;\n    value2 = 0;\n    matchedPairs = 0;\n    for(let i=1; i<=currentLevel; i++){\n        document.getElementById(i).style.backgroundColor = cardBackgroundColor;\n        document.getElementById(i).style.color = cardBackgroundColor;\n        document.getElementById(i).style.pointerEvents = \"auto\";\n    }\n    document.getElementById(\"hint\").style.pointerEvents = \"auto\";\n}\n\nexport const handleGiveUp = (currentLevel) => {\n    for(let i=1; i<=currentLevel; i++){\n        document.getElementById(i).style.backgroundColor = \"#ffffff\";\n        document.getElementById(i).style.color = \"rgb(0, 0, 0)\";\n        document.getElementById(i).style.pointerEvents = \"none\";\n    }\n    document.getElementById(\"hint\").style.pointerEvents = \"auto\";\n}\n\nexport const handleHint = (currentLevel) => {\n    let randomNumber = Math.ceil(Math.random()*currentLevel);\n    console.log(\"random number: \" + randomNumber);\n    let color = document.getElementById(randomNumber).style.backgroundColor;\n    console.log(\"color: \" + color)\n    if( color === \"rgb(68, 138, 255)\"){\n        document.getElementById(randomNumber).style.backgroundColor = \"#ffffff\";\n        document.getElementById(randomNumber).style.color = \"rgb(0, 0, 0)\"\n        setTimeout(() => {\n            document.getElementById(randomNumber).style.backgroundColor = cardBackgroundColor;\n            document.getElementById(randomNumber).style.color = cardBackgroundColor;\n        }, 500);\n        document.getElementById(\"hint\").style.pointerEvents = \"none\";\n    }\n    else {\n        handleHint(currentLevel);\n    }\n}\n\nconst Card = (props) => { \n    let currentLevel = props.currentLevel;\n    const gameCompleted = () => {\n        if(matchedPairs === currentLevel/2){\n            props.setStar(currentLevel);\n            alert(\"Congratulations you have cleared this level\");\n            gameStart(currentLevel);\n            selectedCard1 = 0;\n            selectedCard2 = 0;\n            value1 = 0;\n            value2 = 0;\n            matchedPairs = 0;\n            props.resetMoves();\n        }\n    }\n    \n    const compareCards = () => {\n        if (selectedCard1 && selectedCard2 && (value1 === value2)){\n            selectedCard1 = 0;\n            value1 = 0;\n            selectedCard2 = 0;\n            value2 = 0;\n            matchedPairs++;\n            props.incrementMoves();\n            gameCompleted();\n        } \n        \n        else if (selectedCard1 && selectedCard2) {\n            setTimeout(() => {\n                document.getElementById(selectedCard1).style.backgroundColor = cardBackgroundColor;\n                document.getElementById(selectedCard2).style.backgroundColor = cardBackgroundColor;\n                document.getElementById(selectedCard1).style.color = cardBackgroundColor;\n                document.getElementById(selectedCard2).style.color = cardBackgroundColor;\n                document.getElementById(selectedCard1).style.pointerEvents = \"auto\";\n                document.getElementById(selectedCard2).style.pointerEvents = \"auto\";\n                selectedCard1 = 0;\n                value1 = 0;\n                selectedCard2 = 0;\n                value2 = 0;\n                props.incrementMoves();\n                }, 500);\n        }\n    }\n        const handleCardClick = (id) => {\n            document.getElementById(id).style.backgroundColor = \"#ffffff\";\n            document.getElementById(id).style.color = \"rgb(0, 0, 0)\";\n            document.getElementById(id).style.pointerEvents = \"none\";\n            document.getElementById(id).style.transition = \"background-color 0.25s ease-out\";\n            if(selectedCard1 === 0){\n                selectedCard1 = props.id;\n                value1 = props.value;\n            } else {\n                selectedCard2 = props.id\n                value2 = props.value;\n            }\n\n            compareCards();\n        }\n    \n\n        return (\n            <div \n                className=\"card\"\n                 onClick={() => handleCardClick(props.id)}\n                 id={props.id}\n                 >\n                <p className=\"card-number\">\n                    {props.value}\n                </p>\n            </div>\n        )\n    }\n\n\nexport default Card;","import React, {useState} from 'react'\nimport Card from './Card'\nimport {gameStart, handleGiveUp, handleHint} from './Card';\n\n/* let array = []; */\nlet cardValue = [];\n\n/* let arrayObject = []; */\nlet card = [];\n\nlet currentLevel = 4;\nlet currentStar = 0;\nlet stars = {\"1\": 0, \"2\": 0,\"3\": 0,\"4\": 0,\"5\": 0}\nlet copyOfStars = {\"1\": 0, \"2\": 0,\"3\": 0,\"4\": 0,\"5\": 0};\n/* let level1star = 0, level2star = 0,level3star = 0,level4star = 0,level5star = 0; */ \nlet totalStars = 0;\n\n/* createArray */\nconst createCardValues = () => {\n    cardValue = [];\n    for(let i=1; i<=currentLevel; i++){\n        cardValue.push(Math.ceil(i/2));\n    }\n}\n\n/* createArrayObject */\nconst createCard = () => {\n    card = [];\n    for(let i=1; i<=currentLevel; i++){\n        card.push({id: i, flipped: false, value: cardValue[i-1]});\n    }\n    console.log(card);\n}\nconst shuffle = (cardValue) => {\n        return cardValue.sort(() => Math.random() - 0.5);\n      }\n\nconst createBoard = () => {\n    createCardValues();\n    shuffle(cardValue);\n    createCard();\n}\n\nconst setTotalStars = (stars) => {\n    totalStars = stars[\"1\"] + stars[\"2\"] + stars[\"3\"] + stars[\"4\"] + stars[\"5\"];\n}\n\n/* const displayChallengeButton = () => {\n    console.log(\"Display challenge button is called\");\n    if (stars.level1 && stars.level2 && stars.level3 && stars.level4 && stars.level5){\n        document.getElementById(\"challenge\").style.display = \"block\";\n        alert(\"Challenge button is enabled, you can challenge a friend now.\")\n    } else {\n        document.getElementById(\"challenge\").style.display = \"none\";\n    }\n} */\ncreateBoard();\n\nconst Board = () => {\n    const [moves, setMoves] = useState(0);\n    const [cardDeck, setCardDeck] = useState(card);\n    const setStar = (currentLevel) => {\n        if(moves <= Math.floor(0.75*currentLevel)){\n            currentStar = 3;\n        } else if(moves > Math.floor(0.75*currentLevel) && moves <= currentLevel){\n            currentStar = 2;\n        } else {\n            currentStar = 1;\n        };\n        stars[currentLevel/4] = currentStar;\n        setTotalStars(stars);\n        /* displayChallengeButton(); */\n    }\n\n\n    const incrementMoves = () => {\n        setMoves(moves + 1);\n    }\n\n    const resetMoves = () => {\n        setMoves(0);\n    }\n\n    const handleRestartLevel = (currentLevel) => {\n        alert(\"restarting level\");\n        setMoves(0);\n        createBoard();\n        setCardDeck(card);\n        gameStart(currentLevel);\n        stars[currentLevel/4] = 0;\n        setTotalStars(stars);\n        console.log(stars);\n        /* displayChallengeButton(); */\n    }\n\n    const handleRestartGame = () => {\n        alert(\"restarting game\");\n        currentStar = 0;\n        stars = copyOfStars;\n        setTotalStars(stars);\n        setMoves(0);\n        createBoard();\n        setCardDeck(card);\n        gameStart(currentLevel);\n        /* displayChallengeButton(); */\n    }\n\n    const handleLevelClicked = (level) => {\n        setMoves(0);\n        gameStart(currentLevel);\n        currentLevel = level;\n        createBoard();\n        setCardDeck(card);\n        /* displayChallengeButton(); */\n    }\n\n    const handleOpenCard = (id) => {\n        card.forEach((item) => {\n            if(id === item.id){\n                item.flipped = true;\n            }\n        })\n        setCardDeck(card);\n        console.log(cardDeck);\n    }\n\n    const handleCloseCard = (id) => {\n        card.forEach((item) => {\n            if(id === item.id){\n                item.flipped = false;\n            }\n            \n            setCardDeck(card);\n            console.log(\"cardClosed\");\n            console.log(cardDeck);\n        })\n    }\n\n    return (\n        <div className=\"wrapper\">\n            <h1>Memory Game</h1>\n            <div><h3 className=\"level-indicator\">Current Level: {currentLevel/4}</h3></div>\n            <div><h4 className=\"hint-text\">(You can only use hint once a level)</h4></div>\n            <div className=\"all-buttons\">\n                <div className=\"btn\" onClick={() => handleRestartLevel(currentLevel)}>Restart Level</div>\n                <div className=\"btn\" onClick={() => handleRestartGame()}>Restart Game</div>\n                <div className=\"btn\" onClick={() => handleGiveUp(currentLevel)}>I Give Up</div>\n                <div className=\"btn\" id=\"hint\" onClick={() => handleHint(currentLevel)}>Hint</div>\n                {/* <div className=\"btn\" id=\"challenge\" style={{display: \"none\"}}>Challenge a friend</div> */}\n            </div>\n            <div className=\"score-card\">\n                <p>Moves: {moves}</p>\n                <p>Stars: {stars[currentLevel/4]}</p>\n                <p>Total Stars: {totalStars}</p>\n            </div>\n            <div className=\"levels-container\">\n                <ul>\n                    <li className=\"btn\" onClick={() => handleLevelClicked(4)}>Level 1</li>\n                    <li className=\"btn\" onClick={() => handleLevelClicked(8)}>Level 2</li>\n                    <li className=\"btn\" onClick={() => handleLevelClicked(12)}>Level 3</li>\n                    <li className=\"btn\" onClick={() => handleLevelClicked(16)}>Level 4</li>\n                    <li className=\"btn\" onClick={() => handleLevelClicked(20)}>Level 5</li>\n                </ul>\n            </div>\n            \n            \n            \n            <div className=\"cards-container\">\n                {cardDeck.map((item) => {\n                    return <Card \n                            key={item.id} \n                            value={item.value}\n                            flipped={item.flipped} \n                            id={item.id} \n                            handleOpenCard={handleOpenCard}\n                            handleCloseCard={handleCloseCard}\n                            incrementMoves={incrementMoves}\n                            restartLevel={handleRestartLevel}\n                            resetMoves={resetMoves}\n                            currentLevel={currentLevel}\n                            setStar={setStar}\n                            />\n                })}\n                </div>\n        </div>\n    )\n}\n\nexport default Board;","import React from 'react';\nimport './App.css';\nimport Board from './component/Board';\n\nfunction App() {\n\n  return (\n      <Board />\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}