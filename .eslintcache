[{"/home/harshit/Deuex/memory-game/src/index.js":"1","/home/harshit/Deuex/memory-game/src/App.js":"2","/home/harshit/Deuex/memory-game/src/reportWebVitals.js":"3","/home/harshit/Deuex/memory-game/src/component/Card.js":"4","/home/harshit/Deuex/memory-game/src/component/Board.js":"5"},{"size":500,"mtime":1609835923551,"results":"6","hashOfConfig":"7"},{"size":159,"mtime":1609857254749,"results":"8","hashOfConfig":"7"},{"size":362,"mtime":1609835923551,"results":"9","hashOfConfig":"7"},{"size":1761,"mtime":1609861668735,"results":"10","hashOfConfig":"7"},{"size":2305,"mtime":1609862264264,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"gb5y7x",{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"21","messages":"22","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"14"},"/home/harshit/Deuex/memory-game/src/index.js",[],["24","25"],"/home/harshit/Deuex/memory-game/src/App.js",[],"/home/harshit/Deuex/memory-game/src/reportWebVitals.js",[],"/home/harshit/Deuex/memory-game/src/component/Card.js",[],"/home/harshit/Deuex/memory-game/src/component/Board.js",["26"],"import React, {useState} from 'react'\nimport Card from './Card'\n\nlet array = [1,2,3,4,5,6];\nconst shuffle = (array) => {\n        return array.sort(() => Math.random() - 0.5);\n      }\n\nshuffle(array);\n\nlet arrayObject = [\n    {\n        id: 1,\n        display: \"none\",\n        value: array[0]\n    },\n    {\n        id: 2,\n        display: \"none\",\n        value: array[1]\n    },\n    {\n        id: 3,\n        display: \"none\",\n        value: array[2]\n    },\n    {\n        id: 4,\n        display: \"none\",\n        value: array[3]\n    },\n    {\n        id: 5,\n        display: \"none\",\n        value: array[4]\n    },\n    {\n        id: 6,\n        display: \"none\",\n        value: array[5]\n    },\n]\n\nconst Board = (props) => {\n    const [currentStar, setCurrentStar] = useState(0);\n    const [totalStar, setTotalStar] = useState(0);\n    const [moves, setMoves] = useState(0);\n    const [cardArray, setCardArray] = useState(arrayObject);\n\n    const incrementCurrentStars = () => {\n        if(moves <= 4){\n            setCurrentStar(3);\n        } else if(moves > 4 && moves <= 6){\n            setCurrentStar(2);\n        } else {\n            setCurrentStar(1);\n        };\n        console.log(totalStar);\n    }\n    \n    const incrementMoves = () => {\n        setMoves(moves + 1);\n    }\n\n    const handleRestartLevel = () => {\n        alert(\"restart\");\n        setCurrentStar(0);\n        setMoves(0);\n        setCardArray(arrayObject);\n        window.location.reload();\n    }\n\n    return (\n        <div className=\"wrapper\">\n            <h1>Memory Game</h1>\n            <div className=\"cards-container\">\n                {cardArray.map((item) => {\n                    console.log(item);\n                    return <Card \n                            key={item.id} \n                            value={Math.ceil(item.value/2)} \n                            id={item.id} \n                            incrementCurrentStars={incrementCurrentStars}\n                            incrementMoves={incrementMoves}\n                            />\n                })}\n                </div>\n                <p>Stars: {currentStar}</p>\n                <p>Total Stars: {totalStar}</p>\n                <p>Moves: {moves}</p>\n                <button onClick={handleRestartLevel}>Restart Level</button>\n        </div>\n    )\n}\n\nexport default Board;",{"ruleId":"27","replacedBy":"28"},{"ruleId":"29","replacedBy":"30"},{"ruleId":"31","severity":1,"message":"32","line":46,"column":23,"nodeType":"33","messageId":"34","endLine":46,"endColumn":35},"no-native-reassign",["35"],"no-negated-in-lhs",["36"],"no-unused-vars","'setTotalStar' is assigned a value but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]